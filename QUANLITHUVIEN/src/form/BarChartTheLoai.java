package form;

import Dao.ThongKeDao;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JFrame;
import org.jdesktop.animation.timing.Animator;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.RefineryUtilities;


/**
 *
 * @author Admin
 */
public class BarChartTheLoai extends javax.swing.JDialog {

    ThongKeDao dao = new ThongKeDao();
    private DefaultCategoryDataset dateDataset;
    private JFreeChart chart;
    private CategoryPlot categoryPlot;
    private ChartPanel chartPanel;

    public BarChartTheLoai(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
        showBarChart();

    }

    void init() {
     
        setLocationRelativeTo(null);
        setTitle("Thống Kê ");
    }
        

    public void showBarChart() {


        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        List<Object[]> list = dao.getTacgia();
        for (Object[] row : list) {
            dataset.addValue((Number) row[1], "Số lượng", row[0].toString());
        }

        JFreeChart chart = ChartFactory.createBarChart(
                "Thống kê đầu sách theo tác giả",
                "Tên tác giả",
                "Số lượng",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false
        );

        // Tùy chỉnh biểu đồ cột
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.YELLOW);
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
//        renderer.setMaximumBarWidth(0.06); // Điều chỉnh giá trị theo nhu cầu của bạn
//        renderer.setSeriesPaint(0, new Color(255   , 204, 204));
            renderer.setMaximumBarWidth(0.06);
            renderer.setShadowVisible(true);
            
            GradientPaint gradientPaint = new GradientPaint(0.0f, 0.0f, new Color(255, 204, 204), 0.0f, 0.0f, new Color(255, 102, 102));
renderer.setSeriesPaint(0, gradientPaint);
        

        for (int i = 0; i < dataset.getRowCount(); i++) {
            String chuyenDe = dataset.getRowKey(i).toString();
            renderer.setSeriesToolTipGenerator(i, new StandardCategoryToolTipGenerator(chuyenDe + ": {1}", new DecimalFormat("#.##")));
        }
        renderer.setItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        renderer.setItemLabelsVisible(true);

        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setAutoRange(true); // Tự động điều chỉnh dựa trên dữ liệu
        rangeAxis.setLowerBound(0); // Giá trị thấp nhất
        rangeAxis.setUpperBound(10); // Giá trị cao nhất

        // Hiển thị biểu đồ
        ChartPanel chartPanel1 = new ChartPanel(chart);
        chartPanel1.setBackground(Color.red);
        jPanel2.removeAll();
        jPanel2.add(chartPanel1, BorderLayout.CENTER);
        jPanel2.validate();
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    
    
}
